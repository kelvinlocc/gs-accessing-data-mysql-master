package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private CurrencyRepository currencyRepository;
	private TradableRepository tradableRepository;
	private BasketRepository basketRepository;
	private AccountRepository accountRepository;



	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (
			@RequestParam String name,
			@RequestParam String email,
			@RequestParam String amount,
			@RequestParam String distance,
			@RequestParam String currency,
			@RequestParam String exchangeCurrency
	) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setAmount(amount);
		n.setDistance(distance);
		n.setCurrency(currency);
		n.setExchangeCurrency(exchangeCurrency);

		userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/rate/get-all")
	public @ResponseBody Iterable<Currency> getCurrency() {
		// This returns a JSON or XML with the users
		return currencyRepository.findAll();
	}

	@GetMapping(path="/rate/get-by-name")
	public @ResponseBody Currency getCurrencyByName(@RequestParam String currencyCode) {
		// This returns a JSON or XML with the users
//		return currencyRepository.findCurrencyByName(currencyCode);
		return new Currency();

	}

	@GetMapping(path="/tradable/getAll")
	public @ResponseBody Iterable<Tradable> getAllTradables() {
		return tradableRepository.findAll();
	}

	@GetMapping(path="/tradable/get-by-id")
	public @ResponseBody Tradable getTradableByID(@RequestParam Integer id) {
		Optional<Tradable>result =  tradableRepository.findById(id);
		return result.get();
	}

	@GetMapping(path="/basket/get-by-id")
	public @ResponseBody Basket getBasketByID(@RequestParam Integer id) {
		Optional<Basket> result =  basketRepository.findById(id);
		return result.get();
	}

	@PostMapping(path="/basket/save")
	public @ResponseBody Basket saveBasket(@RequestParam Basket basket) {
		return basketRepository.save(basket);
	}

	@PostMapping(path="/basket/delete")
	public ResponseEntity<String> deleteBasket(@RequestParam Integer id){
		basketRepository.deleteById(id);
		return new ResponseEntity(HttpStatus.OK);
	}


	@GetMapping(path="/account/get-by-id")
	public @ResponseBody Account getAccountByID(@RequestParam Integer id) {
		Optional<Account> result =  accountRepository.findById(id);
		return result.get();
	}

	@PostMapping(path="/account/save")
	public @ResponseBody Account saveAccount(@RequestParam Account account) {
		return accountRepository.save(account);
	}



}
